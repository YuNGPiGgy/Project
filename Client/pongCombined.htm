﻿<!doctype html>
<HTML>
<HEAD>
    <meta charset="utf-8">
    <title> Pong </title>
    <style>

        input, textarea {
            border: 2px solid #990033;
            margin: 10px;
            padding: 0px;
        }

        html, body {
            padding: 0;
            margin: 0;
            height: 100%;
            overflow: hidden;
            padding-right: 100px;
        }

        #ip {
            line-height: 25px;
            color: black;
        }

        #port {
            line-height: 25px;
            color: black
        }

        #username {
            line-height: 25px;
            color: black;
        }

        #body {
            position: fixed;
            color: white;
            top: 500px;
            left: 200px;
            font-size: 30px;
        }

        #Canvas {
            color: white;
            margin: auto;
            display: block;
            padding: 7px;
            position: fixed;
            right: 150px;
            top: 0;
            bottom: 0;
        }

        #connectButton {
            color: black;
            background-color: #FFCC00;
            font-size: 25px;
            margin-top: 20px;
            float: right;
        }

        #title {
            color: white;
            position: fixed;
            top: 300px;
            left: 200px;
            font-size: 75px;
            font-family: Lucida Console;
        }

        #credit {
            color: white;
            position: fixed;
            bottom: 0;
            font-size: 25px;
        }
    </style>
</HEAD>
<body bgcolor="#000000" align="center">
    <br />
    <div id="body">
        Server IP: <input type="text" id="ip" size=30px><br />
        Server Port: <input type="text" id="port" size=27px><br />
        Username: <input type="text" id="username" size=29px><br />
        <button type="button" id="connectButton" onclick="connect();">Connect</button>
    </div>
</body>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
<script src="fancywebsocket.js"></script>
<canvas id="game" width="500" height="500"
        style="border:1px solid #000000;"></canvas>
<br />
<div id="credit">
    Created By: Min Woo Choi, Dominic Langmesser, and Yung-Chu Chuang
</div>
<script>
    var Server;
    var username;
    var canvas = document.getElementById("Canvas");

    function update(text) {
        //console.log(text);
        //"ballPosX | ballPosY | ballDirX | ballDirY | paddle1top | paddle2top | paddle3left | paddle4left | scoreP1 | scoreP2 | scoreP3 | scoreP4"
        var tokens = text.split("|");
        console.log(text);
        game.draw(tokens[0], tokens[1], tokens[2], tokens[3], tokens[4], tokens[5], tokens[6], tokens[7], tokens[8], tokens[9], tokens[10], tokens[11]);
    }

    function send(text) {
        Server.send('message', text);
    }

    function connect() {
        username = document.getElementById('username').value;

        Server = new FancyWebSocket('ws://' + document.getElementById('ip').value + ':' + document.getElementById('port').value);

        //Let the user know we're connected
        Server.bind('open', function () {
            document.getElementById("connectButton").disabled = true;
        });

        //Disconnection occurred.
        Server.bind('close', function (data) {
            document.getElementById("connectButton").disabled = false;
        });

        //Log any messages sent from server
        Server.bind('message', function (payload) {
            update(payload);
        });

        Server.connect();
    }

</script>
<script>

    function Game() {
        var canvas = document.getElementById("game");
        this.width = canvas.width;
        this.height = canvas.height;
        this.context = canvas.getContext("2d");
        this.context.fillStyle = "white";
        this.keys = new KeyListener();

        this.p1 = new Paddle(5, 0, 2, 28, 'red');
        this.p1.y = this.height / 2 - this.p1.height / 2;
        this.display1 = new Display(25, 25, 'red');
        this.p2 = new Paddle(this.width - 5 - 2, 0, 2, 28, 'blue');
        this.p2.y = this.height / 2 - this.p2.height / 2;
        this.display2 = new Display(this.width - 25, this.height - 25, 'blue');
        this.p3 = new Paddle(0, 5, 28, 2, 'yellow');
        this.p3.x = this.width / 2 - this.p3.width / 2;
        this.display3 = new Display(this.width - 25, 25, 'yellow');
        this.p4 = new Paddle(0, this.height - 5 - 2, 28, 2, 'green');
        this.p4.x = this.width / 2 - this.p4.width / 2;
        this.display4 = new Display(25, this.height - 25, 'green');

        this.ball = new Ball();
        this.ball.x = this.width / 2;
        this.ball.y = this.height / 2;
        this.ball.vy = Math.floor(Math.random() * 12 - 6);
        this.ball.vx = 7 - Math.abs(this.ball.vy);
    }

    //"ballPosX | ballPosY | ballDirX | ballDirY | paddle1top | paddle2top | paddle3left | paddle4left | scoreP1 | scoreP2 | scoreP3 | scoreP4"
    Game.prototype.draw = function (bX, bY, bvX, bvY, p1T, p2T, p3L, p4L, s1, s2, s3, s4) {
        this.context.clearRect(0, 0, this.width, this.height);

        this.ball.draw(this.context, bX, bY);

        this.p1.draw(this.context, p1T);
        this.p2.draw(this.context, p2T);
        this.p3.draw(this.context, p3L);
        this.p4.draw(this.context, p4L);
        this.display1.draw(this.context, s1);
        this.display2.draw(this.context, s2);
        this.display3.draw(this.context, s3);
        this.display4.draw(this.context, s4);
    };


    // To which Y direction the paddle is moving
    Game.prototype.updateInputs = function () {
        var input = ''
        var now = Date.now().toString();
        now = now.substr(now.length - 9, now.length);
        if (this.keys.isPressed(37)) { // LEFT
            input += username + "|L|" + now;
            send(input);
        } else if (this.keys.isPressed(38)) { // UP
            input += username + "|U|" + now;
            send(input);
            console.log(input);
        } else if (this.keys.isPressed(39)) { // RIGHT
            input += username + "|R|" + now;
            send(input);
        } else if (this.keys.isPressed(40)) { // DOWN
            input += username + "|D|" + now;
            send(input);
        }
    };

    // PADDLE
    function Paddle(x, y, width, height, color) {
        this.x = x;
        this.y = y;
        this.width = width; // 2
        this.height = height; // 28
        this.score = 0;
        this.color = color;
    }

    Paddle.prototype.draw = function (p) {
        p.fillStyle = this.color;
        p.fillRect(this.x, this.y, this.width, this.height);
    };


    // BALL
    function Ball() {
        this.x = 0;
        this.y = 0;
        this.vx = 0;
        this.vy = 0;
        this.width = 4;
        this.height = 4;
    }
    Ball.prototype.draw = function (p, x, y) {
        p.fillRect(this.x, this.y, this.width, this.height);
    };


    //DISPLAY
    function Display(x, y, color) {
        this.x = x;
        this.y = y;
        this.value = 0;
        this.color = color;
    }

    Display.prototype.draw = function (p) {
        p.fillStyle = this.color;
        p.fillText(this.value, this.x, this.y);
    }


    // KEY LISTENER
    function KeyListener() {
        this.pressedKeys = [];

        this.keydown = function (e) {
            this.pressedKeys[e.keyCode] = true;
        };

        this.keyup = function (e) {
            this.pressedKeys[e.keyCode] = false;
        };

        document.addEventListener("keydown", this.keydown.bind(this));
        document.addEventListener("keyup", this.keyup.bind(this));
    }

    KeyListener.prototype.isPressed = function (key) {
        return this.pressedKeys[key] ? true : false;
    };

    KeyListener.prototype.addKeyPressListener = function (keyCode, callback) {
        document.addEventListener("keypress", function (e) {
            if (e.keyCode == keyCode)
                callback(e);
        });
    };


    // Initialize our game instance
    var game = new Game();

    function MainLoop() {
        // Call the main loop again at a frame rate of 30fps
        game.updateInputs();
        game.draw();
        setTimeout(MainLoop, 33.3333);
    }

    // Start the game execution
    MainLoop();
</script>

</HTML>
